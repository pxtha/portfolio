import React, { useState, useEffect } from 'react';
import { FiArrowLeft } from 'react-icons/fi'; // Import the arrow icon
import TransitionLink from 'gatsby-plugin-transition-link';
import { motion } from 'framer-motion';
import { navigate } from 'gatsby';

const classes = {
  wrapper: 'mb-6 flex w-full',
  name: 'font-semibold text-gray-900 pb-1',
  description: 'text-md text-gray-600 font-light',
  imageWrapper:
    'imageWrapper flex-none bg-gray-100 rounded-md shadow-md transform transition-all duration-200',
  type: 'text-md text-gray-600 font-light italic pb-1 border-b border-gray-300',
  image: ' w-24 h-24 mr-4',
  content: 'pl-4 flex flex-col justify-center',
  child: 'child',
};
const imageWrapperVariants = {
  scaled: { scale: 1.5, zIndex: 1 },
  unscaled: { scale: 1, zIndex: 0 },
};

const classes = {
  wrapper: 'mb-6 flex w-full',
  name: 'font-semibold text-gray-900 pb-1',
  description: 'text-md text-gray-600 font-light',
  imageWrapper:
    'imageWrapper flex-none bg-gray-100 rounded-md shadow-md transform transition-all duration-200',
  type: 'text-md text-gray-600 font-light italic pb-1 border-b border-gray-300',
  image: ' w-24 h-24 mr-4',
  content: 'pl-4 flex flex-col justify-center',
  child: 'child',
};
const imageWrapperVariants = {
  scaled: { scale: 1.5, zIndex: 1 },
  unscaled: { scale: 1, zIndex: 0 },
};
const SummaryItem = ({
  name,
  description,
  link = false,
  internal = false,
  type,
  images,
  color,
}) => {
  const [scale, setScale] = useState(1);
  const [isScaled, setIsScaled] = useState(false);
  useEffect(() => {}, [scale]);

  const customScaleImage = () => {
    setIsScaled(true);
    setScale(11);
  };
  const handleAnimationComplete = (link) => {
    navigate(link);
  };
  const handleBackButton = (e) => {
    e.stopPropagation();
    setIsScaled(false);
    setScale(1);
  };

  return (
    <div className={classes.wrapper}>
      {images && images[0] && (
        <motion.div
          variants={imageWrapperVariants}
          data-isOpen={isScaled}
          className={classes.imageWrapper}
          initial={{ scale: 1 }}
          animate={{ scale: isScaled ? scale : 1 }}
          transition={{ duration: 0.5 }}
          style={{ background: color }}
          onAnimationComplete={() => isScaled && handleAnimationComplete(link)}
        >
          {' '}
        </motion.div>
      )}{' '}
      {isScaled && (
        <motion.button
          onClick={handleBackButton}
          className="absolute top-0 left-0 m-2 text-2xl"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          transition={{ delay: 0.5 }}
        >
          {' '}
        </motion.button>
      )}
      <div className={classes.content}>
        <h3
          className={`${classes.name} ${
            link ? 'hover:underline hover:text-black' : ''
          }`}
        >
          {link ? linkContent : name}
        </h3>
        <p className={classes.type}>{type}</p>
        <p className={classes.description}>{description}</p>
      </div>
    </div>
  );
};

export default SummaryItem;
